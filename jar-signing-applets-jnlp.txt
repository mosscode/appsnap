====
    Copyright (C) 2013, Moss Computing Inc.

    This file is part of appsnap.

    appsnap is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2, or (at your option)
    any later version.

    appsnap is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with appsnap; see the file COPYING.  If not, write to the
    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
    02110-1301 USA.

    Linking this library statically or dynamically with other modules is
    making a combined work based on this library.  Thus, the terms and
    conditions of the GNU General Public License cover the whole
    combination.

    As a special exception, the copyright holders of this library give you
    permission to link this library with independent modules to produce an
    executable, regardless of the license terms of these independent
    modules, and to copy and distribute the resulting executable under
    terms of your choice, provided that you also meet, for each linked
    independent module, the terms and conditions of the license of that
    module.  An independent module is a module which is not derived from
    or based on this library.  If you modify this library, you may extend
    this exception to your version of the library, but you are not
    obligated to do so.  If you do not wish to do so, delete this
    exception statement from your version.
====


Signed jars
 - who signs them?
 - where are the certs stored?
 - is the sigbedness of a jar opaque to the keep?  I.e does it see a signed jar as "just another jar"?
 - what is the purpose of a cert?
    - To identify the code source?
    - To identify the publication?
    - to identify the publisher?
- if certificates are not opaque to the keep, how should they be identified WRT components?
- how should expiration be handled?
Note that expiration prcipitates renewal, which requires a program update


- Keep contains certs (with private keys)
- Keep can sign jars
- Keep signs;
	- only jars that are already in the keep
	- only in response to a command to sign a set of  existing jars; The keep doesn't do "just in time" jar signing.
- Keep has an "endorsements" mechanism
	- An endorsement is a decoration/modification of a component that may be requested at download time
	- Jar signing is implemented ad a type of endorsement.
	- At download time, the user can request that the component(s) be endorsed "as signed by certificate xyz".  
	  This could return a "no endorsement" error.
	  
- Webstart signed "main jars" are a deployment detail.  
	- They'll have to be handled by a special webstart deployer servlet.
	- The "main jar" will have to be a customized, per-deployment component that is generated by a deployment tool or the jnlp publisher.

- Applets will require the services of a library to generate the right HTML snippet

- The manager app will need to have options for making sure an app is signed?  
	- The "add version" wizard in the management app needs:
	   a) an option for deploying the jars to the keep(s)
	   b) an option for specifying endorsements
	   
- Same for appkeep-cli?

- how do we authorize applet/jnlp publishing of a publication?

IMPLEMENTATION PLAN:
 - Add endorsements mechanism to appkeep
     - listEndorsements()
 - Add means of basic http publishing
    - How do we authorize public http access?
    - replication of world access grants
      
 - Implement jar signing & certificate management in appkeep
     - certificate management can be done in the filesystem prob.
 - Add tooling support for endorsements
     - manager
     - appkeep-cli
 - Create library for applets
